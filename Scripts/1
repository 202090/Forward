async function getJavdbList(params = {}) {
  try {
    const token = params.token || TOKEN;
    const category = params.category || 'weekly';
    const page = params.page || 1;

    if (!token) {
      throw new Error('需要提供 token 才能使用');
    }

    const listUrl = `${appConfig.site}/${token}/javdb_vod?t=${category}&ac=videolist&pg=${page}`;
    const listResponse = await Widget.http.get(listUrl, {
      headers: DEFAULT_HEADERS
    });

    if (!listResponse || listResponse.statusCode !== 200) {
      throw new Error(`获取列表失败: ${listResponse?.statusCode || '未知错误'}`);
    }

    const listData = listResponse.data;

    if (!listData) {
      return { site: appConfig.site, videos: [] };
    }

    const videoMatches = listData.match(/<video>([\s\S]*?)<\/video>/g) || [];
    const videos = videoMatches.map((videoXml) => {
      const idMatch = videoXml.match(/<id>(.*?)<\/id>/);
      const nameMatch = videoXml.match(/<name><!\[CDATA\[(.*?)\]\]><\/name>/);
      const picMatch = videoXml.match(/<pic>(.*?)<\/pic>/);
      const bigpicMatch = videoXml.match(/<bigpic>(.*?)<\/bigpic>/);

      return {
        id: idMatch ? idMatch[1] : "",
        title: nameMatch ? nameMatch[1] : "Unknown Title",
        category: category,
        tags: ["示例标签"],
        poster: picMatch ? picMatch[1] : "",
        backdrop: bigpicMatch ? bigpicMatch[1] : "",
        videoUrl: `${appConfig.site}/${token}/javdb_vod?ids=${idMatch ? idMatch[1] : ""}`,
        description: "示例描述信息",
        uploadDate: new Date().toISOString().split('T')[0],
        rating: Math.random() * 5,
        views: Math.floor(Math.random() * 100000)
      };
    });

    return { site: appConfig.site, videos };
  } catch (error) {
    console.error('获取 JAVDB 列表失败:', error);
    return { site: appConfig.site, videos: [] };
  }
}